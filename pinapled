#!/usr/bin/env python

# Author: Douglas Otwell
# This software is released to the public domain

# The Software is provided "as is" without warranty of any kind, either express or implied,
# including without limitation any implied warranties of condition, uninterrupted use,
# merchantability, fitness for a particular purpose, or non-infringement.

import sys
import signal
import logging
import dbus
import dbus.service
import dbus.mainloop.glib
import gobject
from optparse import OptionParser, make_option

LOG_LEVEL = logging.DEBUG
#LOG_FILE = "/var/log/pinaple.log"
LOG_FILE = "/dev/stdout"
LOG_FORMAT = "%(asctime)s %(levelname)s %(message)s"

def adapter_property_changed_cb(property_name, value, path, interface):

    if (property_name == "Discoverable"):
        discoverable = "" if value else "not "
        logging.info("The Bluetooth adapter is %sdiscoverable" % (discoverable))
    else:
        logging.debug("%s %s %s %s" % (interface, path, property_name, str(value)))


def device_property_changed_cb(property_name, value, path, interface):

    device = dbus.Interface(bus.get_object("org.bluez", path), "org.bluez.Device")
    properties = device.GetProperties()

    if (property_name == "Connected"):
        action = "connected to" if value else "disconnected from"
        logging.info("The device %s [%s] is %s the NAP" % (properties["Alias"], properties["Address"], action))
    elif (property_name == "Paired"):
        action = "paired" if value else "un-paired"
        logging.info("The device %s [%s] is %s" % (properties["Alias"], properties["Address"], action))
    elif (property_name == "Trusted"):
        action = "trusted" if value else "un-trusted"
        logging.info("The device %s [%s] is %s" % (properties["Alias"], properties["Address"], action))
    else:
        logging.debug("%s %s %s %s" % (interface, path, property_name, str(value)))

def shutdown(signum, frame):

    mainloop.quit()

if __name__ == "__main__":

    # shut down on a TERM signal 
    signal.signal(signal.SIGTERM, shutdown)

    # get the argument and options
    bridge = None
    parser = OptionParser()
    parser.add_option("-l", "--logfile", action="store", dest="log_file", help="log to file")
    (options, args) = parser.parse_args()
    if (len(args) > 0):
        bridge = args[0]
    if (options.log_file):
        LOG_FILE = options.log_file

    # start logging
    logging.basicConfig(filename=LOG_FILE, format=LOG_FORMAT, level=LOG_LEVEL)
    logging.info("Starting pinaple daemon")

    if (not bridge):
        logging.error("No bridge device name was specified as first argument. Exiting pinapled")
        sys.exit(1)

    try:
        dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
        bus = dbus.SystemBus()
    except:
        logging.error("Unable to get the system dbus. Exiting pinapled. Is dbus running?")
        sys.exit(1) 

    try:
        manager = dbus.Interface(bus.get_object("org.bluez", "/"), "org.bluez.Manager")
        adapter_path = manager.DefaultAdapter()
    except:
        logging.error("Unable to get default Bluetooth adapter. Exiting pinapled. Is the adapter connected and up and running?")
        sys.exit(1) 

    # register the NAP service for the bridge device
    try:
        server = dbus.Interface(bus.get_object("org.bluez", adapter_path), "org.bluez.NetworkServer")
        server.Register("nap", bridge)
    except:
        logging.error("Unable to register the NAP service on the specified bridge {0}. Exiting pinapled. Is the bridge up?".format(bridge))
        sys.exit(1) 
    logging.info("NAP service registered on bridge {0}".format(bridge))

    # listen for signals on the Bluez bus
    bus.add_signal_receiver(device_property_changed_cb, bus_name="org.bluez", signal_name="PropertyChanged", 
            dbus_interface="org.bluez.Device", path_keyword="path", interface_keyword="interface")
    bus.add_signal_receiver(adapter_property_changed_cb, bus_name="org.bluez", signal_name="PropertyChanged", 
            dbus_interface="org.bluez.Adapter", path_keyword="path", interface_keyword="interface")

    try:
	mainloop = gobject.MainLoop()
	mainloop.run()
    except KeyboardInterrupt:
        pass    
    except:
        logging.error("Unable to run the gobject main loop")

    logging.info("Unregistering NAP service")
    server.Unregister("nap")
    logging.info("Shutting down pinaple")
    sys.exit(0)
